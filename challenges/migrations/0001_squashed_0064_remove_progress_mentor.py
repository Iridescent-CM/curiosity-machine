# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2020-05-28 19:28
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_s3_storage.storage


class Migration(migrations.Migration):

    replaces = [('challenges', '0001_initial'), ('challenges', '0002_auto_20140325_1620'), ('challenges', '0003_challenge_mentor'), ('challenges', '0004_auto_20140403_0954'), ('challenges', '0005_challenge_video'), ('challenges', '0006_auto_20140423_1320'), ('challenges', '0007_auto_20140424_1506'), ('challenges', '0008_challenge_materials_list'), ('challenges', '0009_challenge_image'), ('challenges', '0010_auto_20140429_1415'), ('challenges', '0011_auto_20140429_1435'), ('challenges', '0012_auto_20140501_1153'), ('challenges', '0013_challenge_reflect_questions'), ('challenges', '0014_auto_20140501_1501'), ('challenges', '0015_remove_progress_approved'), ('challenges', '0016_progress_approved'), ('challenges', '0017_progress_materials_list'), ('challenges', '0018_auto_20140520_1411'), ('challenges', '0019_auto_20140523_1548'), ('challenges', '0020_auto_20140523_1556'), ('challenges', '0021_auto_20140527_1603'), ('challenges', '0022_auto_20140527_1622'), ('challenges', '0023_auto_20140528_1434'), ('challenges', '0024_example'), ('challenges', '0025_auto_20140624_1602'), ('challenges', '0026_auto_20140630_0708'), ('challenges', '0027_challenge_mentor_guide'), ('challenges', '0028_auto_20150203_1451'), ('challenges', '0029_challenge_draft'), ('challenges', '0030_auto_20141202_0835'), ('challenges', '0031_filter'), ('challenges', '0032_auto_20150224_1219'), ('challenges', '0033_challenge_themes'), ('challenges', '0034_auto_20150224_1324'), ('challenges', '0035_remove_challenge_theme'), ('challenges', '0036_auto_20150629_0826'), ('challenges', '0037_challenge_public'), ('challenges', '0038_filter_header_template'), ('challenges', '0039_example_approved'), ('challenges', '0040_auto_20160201_1411'), ('challenges', '0041_auto_20160308_1600'), ('challenges', '0042_auto_20160309_1040'), ('challenges', '0043_auto_20160317_1155'), ('challenges', '0044_challenge_landing_image'), ('challenges', '0045_auto_20160513_1009'), ('challenges', '0046_remove_challenge_public'), ('challenges', '0047_challenge_free'), ('challenges', '0048_resource_resourcefile'), ('challenges', '0049_auto_20160919_1610'), ('challenges', '0050_auto_20160926_1609'), ('challenges', '0051_challenge_core'), ('challenges', '0052_auto_20161019_1503'), ('challenges', '0053_auto_20171214_1204'), ('challenges', '0054_auto_20171214_1204'), ('challenges', '0055_remove_progress_student'), ('challenges', '0056_auto_20180116_1228'), ('challenges', '0057_auto_20180209_1012'), ('challenges', '0058_auto_20180222_1334'), ('challenges', '0059_auto_20180315_1519'), ('challenges', '0060_challenge_feedback_question'), ('challenges', '0061_auto_20180612_1237'), ('challenges', '0062_remove_challenge_core'), ('challenges', '0063_remove_challenge_mentor_guide'), ('challenges', '0064_remove_progress_mentor')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('videos', '__first__'),
        ('feedback', '__first__'),
        ('images', '__first__'),
        ('videos', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('description', models.TextField()),
                ('how_to_make_it', models.TextField()),
                ('learn_more', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Progress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='challenges.Challenge', to_field='id')),
                ('started', models.DateTimeField(default=django.utils.timezone.now)),
                ('approved', models.DateTimeField(blank=True, null=True)),
                ('_materials_list', models.TextField(blank=True, db_column='materials_list', help_text='HTML')),
            ],
        ),
        migrations.AddField(
            model_name='challenge',
            name='students',
            field=models.ManyToManyField(null=True, through='challenges.Progress', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('icon', models.TextField(default='icon-neuroscience', help_text='This determines the icon that displays on the theme. Choose and icon by entering one of the following icon classes:<br><strong>icon-satellite icon-robotics icon-ocean icon-neuroscience icon-inventor icon-food icon-engineer icon-electrical icon-civil icon-builder icon-biomimicry icon-biomechanics icon-art icon-aerospace icon-compsci icon-materials</strong><br /><br />Additionally available are the set of icons located here: <a href=\'http://getbootstrap.com/components/\'>Bootstrap Glyphicons</a>. Enter both class names separated with a space. for example "glyphicon glyphicon-film" without quotes.', max_length=64)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='challenge',
            name='video',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='videos.Video', to_field='id'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='materials_list',
            field=models.TextField(help_text='HTML'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='images.Image', to_field='id'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='build_call_to_action',
            field=models.TextField(help_text='HTML, shown in the left column of the build stage'),
        ),
        migrations.AlterField(
            model_name='challenge',
            name='how_to_make_it',
            field=models.TextField(help_text='HTML'),
        ),
        migrations.AlterField(
            model_name='challenge',
            name='learn_more',
            field=models.TextField(help_text='HTML'),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
            ],
        ),
        migrations.AddField(
            model_name='challenge',
            name='reflect_questions',
            field=models.ManyToManyField(null=True, to='challenges.Question'),
        ),
        migrations.AlterField(
            model_name='challenge',
            name='learn_more',
            field=models.TextField(help_text='HTML, shown in the guide'),
        ),
        migrations.AlterField(
            model_name='challenge',
            name='how_to_make_it',
            field=models.TextField(help_text='HTML, shown in the guide'),
        ),
        migrations.AlterField(
            model_name='challenge',
            name='description',
            field=models.TextField(help_text='One line of plain text, shown on the inspiration page'),
        ),
        migrations.CreateModel(
            name='Example',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='challenges.Progress', to_field='id')),
                ('image', models.ForeignKey(blank=True, help_text='An image to display in the gallery. If a video is also set, this will be the thumbnail. Each example must have an image or a video, or both, to be displayed correctly.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='images.Image', to_field='id')),
                ('approved', models.NullBooleanField(db_index=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='challenges.Challenge', to_field='id')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Favorites',
            },
        ),
        migrations.AddField(
            model_name='challenge',
            name='favorited',
            field=models.ManyToManyField(null=True, through='challenges.Favorite', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='challenge',
            name='draft',
            field=models.BooleanField(default=True, help_text='Drafts are not shown in the main challenge list'),
        ),
        migrations.CreateModel(
            name='Filter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name of the filter', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('visible', models.BooleanField(db_index=True, default=False)),
                ('challenges', models.ManyToManyField(related_name='filters', to='challenges.Challenge')),
                ('header_template', models.CharField(blank=True, help_text='Path to template containing header to display on filtered view', max_length=128, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='challenge',
            name='themes',
            field=models.ManyToManyField(blank=True, related_name='challenges', to='challenges.Theme'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='landing_image',
            field=models.ForeignKey(blank=True, help_text='Image size should be a 4:3 ratio, at least 720px wide for best results. Jpg, png, or gif accepted.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='images.Image'),
        ),
        migrations.AlterModelOptions(
            name='progress',
            options={'verbose_name_plural': 'progresses'},
        ),
        migrations.AlterField(
            model_name='challenge',
            name='favorited',
            field=models.ManyToManyField(related_name='favorite_challenges', through='challenges.Favorite', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='challenge',
            name='reflect_questions',
            field=models.ManyToManyField(to='challenges.Question'),
        ),
        migrations.AlterField(
            model_name='challenge',
            name='students',
            field=models.ManyToManyField(related_name='challenges', through='challenges.Progress', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='challenge',
            name='free',
            field=models.BooleanField(default=False, help_text='Free challenges are available to users regardless of membership'),
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('description', models.TextField()),
                ('challenge', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='challenges.Challenge')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(storage=django_s3_storage.storage.S3Storage(aws_s3_metadata={'Content-Disposition': 'attachment'}), upload_to='challenge_resource/%Y/%m/%d/')),
                ('link_text', models.CharField(help_text='Text that goes on a button. Keep it short (1 - 3 words).', max_length=64, null=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='challenges.Resource')),
            ],
        ),
        migrations.AlterModelOptions(
            name='challenge',
            options={'ordering': ['order']},
        ),
        migrations.AddField(
            model_name='challenge',
            name='order',
            field=models.PositiveIntegerField(blank=True, help_text='Challenges will be shown in ascending numeric order, with blanks last', null=True, verbose_name='Order preference'),
        ),
        migrations.AlterModelOptions(
            name='challenge',
            options={'ordering': ['order', '-id']},
        ),
        migrations.AddField(
            model_name='challenge',
            name='difficulty_level',
            field=models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3)], default=1, help_text='From 1 (easy) to 3 (difficult)'),
        ),
        migrations.AlterField(
            model_name='resource',
            name='challenge',
            field=models.ForeignKey(help_text='The challenge that this resource should be associated with.', null=True, on_delete=django.db.models.deletion.CASCADE, to='challenges.Challenge'),
        ),
        migrations.AlterField(
            model_name='resource',
            name='description',
            field=models.TextField(help_text='Text that describes the resource. Should be < 50 words.'),
        ),
        migrations.AlterField(
            model_name='resource',
            name='name',
            field=models.CharField(help_text='Title for the resource, e.g. “Grade 3-5 Mini Unit”.', max_length=128),
        ),
        migrations.RenameField(
            model_name='challenge',
            old_name='students',
            new_name='doers',
        ),
        migrations.AddField(
            model_name='progress',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progresses', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='challenge',
            name='free',
            field=models.BooleanField(default=True, help_text='Free challenges are available to users regardless of membership'),
        ),
        migrations.AlterUniqueTogether(
            name='progress',
            unique_together=set([('challenge', 'owner')]),
        ),
        migrations.AddField(
            model_name='challenge',
            name='feedback_question',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='feedback.FeedbackQuestion'),
        ),
    ]
